services:
 - docker:18-dind

variables:
  IMAGE_VERSION: "3.5.4"
  STAGING_CREATE_DOCKER_IMAGE: "true"
  STAGING_DEPLOY_TYPE: "install"
  PRODUCTION_DEPLOY_TYPE: "nothing"
  NAMESPACE: "newsletters"

stages:
  - prepare-namespace-staging
  - prepare-staging
  - secret-staging
  - staging-registry-credentials-encrypted
  - create-docker-image
  - deploy-staging
  - auth-staging
  - ingress-staging
  - cert-manager-staging
  - prepare-namespace-production
  - prepare-production
  - secret-production
  - production-registry-credentials-encrypted
  - deploy-production
  - ingress-production
  - cert-manager-production


prepare-namespace-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-namespace-staging
  environment:
    name: staging
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl create namespace ${NAMESPACE}; fi
  allow_failure: true


prepare-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-staging
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl delete deployment newsletters-staging-domain -n ${NAMESPACE}; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl delete service newsletters-domain  -n ${NAMESPACE}; fi
  allow_failure: true


secret-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: secret-staging
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - kubectl apply -f staging/newsletters-secret-staging-encrypted.yml


staging-registry-credentials-encrypted:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: staging-registry-credentials-encrypted
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - kubectl apply -f staging/staging-registry-credentials-encrypted.yml


create-docker-image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: create-docker-image
  script:
    - if [ "$STAGING_CREATE_DOCKER_IMAGE" == "true" ]; then  mkdir -p /kaniko/.docker; fi
    - if [ "$STAGING_CREATE_DOCKER_IMAGE" == "true" ]; then  echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json; fi
    - if [ "$STAGING_CREATE_DOCKER_IMAGE" == "true" ]; then /kaniko/executor --context $CI_PROJECT_DIR/docker --dockerfile $CI_PROJECT_DIR/docker/Dockerfile --destination $CI_REGISTRY_IMAGE:5.2.3; fi
    - echo {$CI_REGISTRY_IMAGE:5.2.3}


deploy-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: deploy-staging
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-service.yml; fi


auth-staging:
 image:
   name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
   entrypoint: ["/bin/sh", "-c"]
 stage: auth-staging
 environment:
   name: staging
   kubernetes:
     namespace: ${NAMESPACE}
 script:
   - echo ${CI_JOB_NAME}
   - kubectl version
   - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-auth-secret.yml; fi
   - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-auth-middleware.yml; fi


ingress-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: ingress-staging
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-ingress-route.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-secure-ingress-route.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-middleware.yml; fi


cert-manager-staging:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: cert-manager-staging
  environment:
    name: staging
    kubernetes:
      namespace: ${NAMESPACE}
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-issuer.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/newsletters-staging-domain-solver.yml; fi


prepare-namespace-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-namespace-production
  environment:
    name: production
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl create namespace ${NAMESPACE}; fi
  allow_failure: true


prepare-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-production
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl delete replicaset newsletters-domain -n ${NAMESPACE}; fi 
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl delete svc newsletters-domain -n ${NAMESPACE}; fi 
  allow_failure: true


secret-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: secret-production
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - kubectl apply -f production/newsletters-secret-production-encrypted.yml


production-registry-credentials-encrypted:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: production-registry-credentials-encrypted
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - kubectl apply -f production/production-registry-credentials-encrypted.yml


deploy-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: deploy-production
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-service.yml; fi


ingress-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: ingress-production
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-ingress-route.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-secure-ingress-route.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-middleware.yml; fi


cert-manager-production:
  image:
    name: 'dtzar/helm-kubectl:$IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: cert-manager-production
  environment:
    name: production
    kubernetes:
      namespace: ${NAMESPACE}
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-issuer.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/newsletters-domain-solver.yml; fi
